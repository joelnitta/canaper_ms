---
title: "canaper: Categorical analysis of neo- and paleo-endemism in R"
bibliography: references.yaml
csl: ecography.csl
highlight-style: github
crossref: 
  fig-title: Fig.
  tbl-title: Table
  fig-prefix: Fig.
  tbl-prefix: Table
format:
  docx:
    reference-doc: custom-reference.docx
  pdf:
    include-in-header:
      # keep figures from floating away
      text: |
        \usepackage{float}
        \makeatletter\renewcommand*{\fps@figure}{H}\makeatother
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(targets)
library(tidyverse)
library(patchwork)

number <- function(...) {
  scales::number(big.mark = ",", ...)
}
```

Joel H. Nitta^1,\*^, Shawn W. Laffan^2^, Brent D. Mishler^3^, and Wataru Iwasaki^1,4,5,6,7,8^

^1^Department of Integrated Biosciences, Graduate School of Frontier Sciences, The University of Tokyo, Chiba, Japan

^2^School of Biological, Earth and Environmental Sciences, The University of New South Wales, Kensington, Australia

^3^Department of Integrative Biology, University of California Berkeley, Berkeley, USA

^4^Department of Computational Biology and Medical Sciences, Graduate School of Frontier Sciences, The University of Tokyo, Chiba, Japan

^5^Department of Biological Sciences, Graduate School of Science, The University of Tokyo, Tokyo, Japan

^6^Atmosphere and Ocean Research Institute, The University of Tokyo, Chiba, Japan

^7^Institute for Quantitative Biosciences, The University of Tokyo, Tokyo, Japan

^8^Collaborative Research Institute for Innovative Microbiology, The University of Tokyo, Tokyo, Japan

\* Corresponding author  
Joel H. Nitta  
joelnitta@gmail.com

{{< pagebreak >}}

# canaper: Categorical analysis of neo- and paleo-endemism in R

# Abstract

Biodiversity has typically been quantified using species richness, but this ignores evolutionary history.
Due to the increasing availability of robust phylogenies, methods have been developed that incorporate phylogenetic relationships into quantification of biodiversity.
CANAPE (categorical analysis of neo- and paleo-endemism) is one such method that can provide insight into the evolutionary processes generating biodiversity.
The only currently available software implementing CANAPE is Biodiverse, which is written in Perl and can be used either through a graphical user interface (GUI) or user-developed scripts.
However, many researchers, particularly in the fields of ecology and evolutionary biology, use the R programming language to conduct their analyses.

Here, we present `canaper`, a new R package that provides functions to conduct CANAPE in R.
`canaper` implements methods for efficient computation, including parallelization and encoding of community data as sparse matrices.
The interface is designed for maximum simplicity and reproducibility; CANAPE can be conducted with two functions, and parallel computing can be enabled with one line of code.

Our case study shows that `canaper` produces equivalent results to Biodiverse and can complete computations on moderately sized datasets quickly (< 10 min to reproduce a canonical study).

`canaper` allows researchers to conduct all analyses from data import and cleaning through CANAPE within R, thereby averting the need to manually import and export data and analysis results between programs.
We anticipate `canaper` will become a part of the toolkit for analyzing biodiversity in R.

Keywords: biodiversity, CANAPE, canaper, endemism, phylogeny, R, spatial phylogenetics

{{< pagebreak >}}

# Introduction

Quantifying biodiversity is a major goal of ecology.
The simplest and most commonly used biodiversity metric is species richness [e.g., @Diamond1975].
However, as all taxa are related to some degree by descent from a common ancestor, a thorough understanding of biodiversity is only possible by considering their evolutionary relationships.
This became possible with the development of phylogenetic measures of biodiversity, such as phylogenetic diversity [PD\; @Faith1992] and phylogenetic endemism [PE\; @Rosauer2009] (Box 1).
Such analyses are becoming much more common due to the widespread availability of robust molecular phylogenies and large spatial datasets [e.g., @Mishler2020; @Nitta2022a; @Thornhill2017].

One recently developed extension of PE is categorical analysis of neo-and paleo-endemism [CANAPE\; @Mishler2014].
CANAPE uses phylogenetic methods to give insight into evolutionary processes that produce centers of endemism (areas with many narrow-ranged taxa; or in the phylogenetic sense, concentrations of narrow-ranged branches of the phylogeny).
In theory, centers of endemism may arise via multiple processes.
For example, previously widespread lineages may undergo extinction in all but a portion of their range, leading to paleo-endemism.
Alternately, recently diverged lineages may only occur in a small area and lead to neo-endemism.
It is also possible that a given area is home to a high concentration of both paleo- and neo-endemic lineages (mixed endemism).
CANAPE involves analyzing observed patterns of PE in comparison with a null model to first infer whether an area is significantly high in PE, and then to classify those areas into centers of paleo-endemism, neo-endemism, or mixed endemism.
CANAPE is widely used (\> 50 publications in Google Scholar query for papers that cite @Mishler2014 and mention "CANAPE"), and is a central component of the field of spatial phylogenetics.

Despite the popularity of CANAPE, it has so far only been implemented in one software package, Biodiverse [@Laffan2010].
Biodiverse is written in Perl and comprises an analytical engine and a graphical user interface (GUI).
While Biodiverse is convenient for non-coders because of its GUI, many ecologists and evolutionary biologists use R for their analyses [@Lai2019].
Until now, an R user who wanted to conduct CANAPE analysis as part of a broader R workflow needed to first clean raw data, export it to Biodiverse, conduct PD and PE analyses in Biodiverse, then import the results back into R for further analysis and visualization.
Also, while Biodiverse calculated the metrics needed to categorize endemism type, it did not actually perform this categorization (although this feature will be included in a future version of Biodiverse).
Furthermore, the Biodiverse GUI alone does not support parallel processing, which is needed for large datasets.
Parallel processing and automation of Biodiverse analyses is only currently possible using Perl scripts.
A set of R scripts is available to call Biodiverse Perl scripts from R (<https://github.com/NunzioKnerr/biodiverse_pipeline>), but it is not an R package and does not conduct CANAPE within R.

Here, we present a new R package that implements CANAPE completely in R: `canaper`.
We strove to make `canaper` simple to use and efficient.
Parallel computing can be enabled with a single line of code.
`canaper` has passed code review meeting the "silver" standards for statistical software at rOpenSci [@Boettiger2015], and is verified against a large number of unit tests (>99% coverage).
All results are reproducible by setting the random seed generator in R, in both sequential and parallel computing modes.

# Installation

The stable version of `canaper` can be installed from CRAN, and the latest development version from r-universe (<https://r-universe.dev/>).

```{r}
#| label: installation
#| eval: false

# Stable version
install.packages("canaper")

# Development version
install.packages("canaper", repos = "https://ropensci.r-universe.dev")
```

# Input data format

## Community data

Community data is provided as a data frame or matrix, with species as columns and communities (also referred to as "sites" or "grid-cells") as rows.
In this case, the data must include both row names and column names.
Community data may also be input as a tibble, in which case site names must be indicated in a dedicated column (default column name `"site"`), rather than row names since tibbles lack row names.
Community data may be either presence-absence data (0s or 1s) or abundance data (integers \>= 0).
However, calculations of PD and PE for CANAPE use only presence-absence information (i.e., no abundance weighting is used), so identical results will be obtained whether the input data is abundance or abundance that has been converted to presence-absence.
Community data is typically loaded using `read.csv()`, `readr::read_csv()`, or other functions that can import rectangular data.
The `points2comm()` function of the `phyloregion` package may be used to convert raw occurrence data (e.g., latitude and longitude of species occurrences) to a community matrix [@Daru2020a].

## Phylogeny

The `ape` R package is used to handle phylogenies, which are stored as lists of the class `phylo`.
Phylogenies should have no negative branch lengths, but are not required to be fully bifurcating.
Either a phylogram or chronogram may be used.
Phylogenies can be loaded with the `ape::read.tree()` function.

# Analysis workflow

The entire CANAPE workflow can be run with two functions, `cpr_rand_test()` and `cpr_classify_endem()`.
However, internally this entails several steps that the user should be aware of as follows (@fig-workflow).

## Calculate observed values

First, the input phylogeny is scaled to a total length of 1 and observed phylogenetic diversity (`pd_obs`) and phylogenetic endemism (`pe_obs`) are calculated (Box 1).
Next, an alternative phylogeny (also referred to as the "comparison tree") is constructed that has non-zero branch lengths set to a constant value (canaper arbitrarily uses 1), then rescaled to a total length of 1.
PD and PE are then calculated on the alternative phylogeny (`pd_alt`, `pe_alt`).
Relative PD and PE, the ratio of `pd_obs` to `pd_alt` and `pe_obs` to `pe_alt` respectively, are then calculated (RPD, RPE; Box 1).
However, the statistical significance of any of these metrics cannot be determined from observed values alone.

## Generate random communities

PD (and by extension, PE, RPD, and RPE) will increase with taxon richness, since adding a new taxon adds new branches to the tree.
To determine the statistical significance of these metrics, the observed value is compared to a distribution of values obtained from a set of random communities.
The random communities are generated by a randomization algorithm that shuffles the original data.

Since the randomization algorithm influences the range of reference (expected) values, the choice of randomization algorithm is likely to have a large effect on the results.
As there is no single "correct" algorithm, we have opted to provide the user with a wide range of options by implementing randomization algorithms included in the `vegan` package.
`vegan` includes \>30 randomization algorithms, but not all are appropriate for CANAPE.
Recommended algorithms include `swap` [@Gotelli2003] and `curveball` [@Strona2014].
These algorithms preserve the number of sites occupied by each species and the richness of each site, and both produce results comparable to one commonly used randomization algorithm in Biodiverse called `rand_structured` (see "Example: Australian *Acacia*").
`curveball` has been shown to be more computationally efficient than `swap` as implemented in the `picante` package [@Strona2014], but we are unaware of any studies comparing the effects on PD or CANAPE between the two.

We have also provided a method for users to provide a custom, user-defined randomization algorithm using the `vegan` framework.
This may be appropriate if, for example, the community matrix includes a very wide area and it is desired to restrict randomizations to subsets of the area.

## Calculate summary statistics

Once a randomization algorithm has been selected, random communities are generated for a number of replicates set by the user, and a set of summary statistics are computed (Appendix S1).
Summary statistics include the mean and standard deviation of PD, RPD, PE, and RPE of the random communities and comparisons of observed values to the random communities including standard effect size and rank, which is used to calculate *p*-values.

## Categorize endemism

The final step in CANAPE is to categorize endemism as described in @Mishler2014.
Briefly, this is done by comparing significance values of summary statistics calculated in the previous step (Appendix S2).
To be considered significantly endemic, a given grid-cell must first have significantly high `pe_obs` or `pe_alt` or both (one-tailed test).
If this is true, the grid-cell is classified into one of three non-overlapping categories: if the grid-cell has significantly high or low RPE (two-tailed test), it is considered to be a center of paleo-endemism or neo-endemism, respectively; if RPE is not significant (but `pe_obs`, `pe_alt`, or both are), it is considered a center of mixed endemism.
Centers of mixed endemism can be further divided based on *p*-value; if `pe_obs` and `pe_alt` and both significant at the $\alpha = 0.01$ level, the grid-cell may be considered a center of super-endemism (but not all studies make this distinction).

# Major functions

## `cpr_rand_comm()`

The `cpr_rand_comm()` function generates a single random community. 
The first argument, `comm`, is a community data frame (or matrix). 
The second, `null_model`, is the name of one of the predefined randomization to use.
The remainder of the arguments are particular to specific types of randomization algorithm.
`cpr_rand_comm()` is typically not called by the user directly, but is provided to help users select randomization algorithms and settings.

One feature to be aware of is that randomization algorithms in vegan are classified as either binary or quantitative.
Binary algorithms are designed for binary (i.e., presence-absence) data, and quantitative algorithms are designed for quantitative (i.e., abundance) data.
Either type of algorithm will accept either type of data, but binary algorithms will convert abundance data to binary and return a binary matrix (data frame).

As the calculations of PD and PE in `canaper` do not take into account abundance (i.e., no abundance weighting is used), identical results will be obtained by either using abundance data or converting abundance data to binary before analysis.
In this sense, the binary randomization algorithms are appropriate for CANAPE.

The following code illustrates use of `cpr_rand_comm()` with a set of example data that comes with `canaper`, the test data from Phylocom [@Webb2008].

```{r}
#| label: cpr-rand-comm-demo
library(canaper)

# Set a seed for reproducibility
set.seed(12345)

# The original data includes abundance
data(phylocom)
phylocom$comm

# Binary null model produces binary output
cpr_rand_comm(phylocom$comm, "swap", n_iterations = 100)
```

## `cpr_iter_sim()`

```{r}
#| label: acacia-stats
#| include: false
set.seed(12345)

data(acacia)

acacia_bin <- acacia$comm
total_cells <- dim(acacia_bin)[1] * dim(acacia_bin)[2] 
acacia_bin[acacia_bin > 0] <- 1
acacia_non_empty <- 1 - (sum(acacia_bin) / total_cells)
acacia_non_empty <- scales::percent(acacia_non_empty, accuracy = 0.1)
```

`cpr_iter_sim()` is not required for the CANAPE workflow, but is rather a diagnostic function for use with randomization algorithms that work by exchanging cells of the community matrix such as `swap` [@Gotelli2003] or `curveball` [@Strona2014].
Each such exchange is known as an "iteration".
It is generally impossible to know *a-priori* how many iterations are needed to completely randomize a given matrix; this number depends on properties of the matrix and the randomization algorithm.
Generally, larger matrices with more skew (overabundance of zeros) will require more iterations [@Miklos2004].

`cpr_iter_sim()` conducts successive exchanges and records the similarity between the original matrix and the randomized matrix at each iteration.
The similarity values should initially decrease until an approximate minimum is reached; further iterations will only result in noise around this minimum.
A number slightly larger than the smallest number of iterations needed to reach the approximate minimum value can then be used for randomizing the community.
The following code demonstrates usage of `cpr_rand_test()` with the *Acacia* dataset [@Mishler2014] that comes with `canaper`.
The *Acacia* dataset is relatively large (@tbl-datasets) and highly skewed (`r acacia_non_empty` zeros).

```{r}
#| label: cpr-iter-sim-demo
set.seed(12345)

data(acacia)

# Conduct up to 100,000 iterations (swaps),
# recording similarity every 1000 iterations
iter_sim_res <- cpr_iter_sim(
  comm = acacia$comm,
  null_model = "curveball",
  n_iterations = 100000,
  thin = 1000
)

# Inspect the output
iter_sim_res
```

It is useful to plot the output to identify the minimum number of iterations needed.
Code to generate a plot with the `ggplot2` package and its output are shown in the online Supporting Information (Fig. S1).
The plot shows that the community matrix becomes maximally randomized after about 40,000--50,000 iterations and that the original matrix and randomized matrix are about 96.5% similar.

## `cpr_rand_test()`

The `cpr_rand_test()` function carries out calculation of observed values, generation of random communities, and calculation of summary statistics as described above in "Analysis workflow".
The main arguments to this function are the input community and phylogeny, type of null model, and settings for the null model.
For a full list of null models to choose from, run `?vegan::commsim()`.
It should be noted that the type of null model, number of random communities, and number of swapping iterations performed per random community (for swapping algorithms) all may strongly affect results of `cpr_rand_test()` [or any metric that is based on comparison to a set of random communities\; @Gotelli2001a].
While it is beyond the scope of this paper to provide a full discussion of null models in ecology, we have provided details about how to explore appropriate null model settings with `canaper` in the "How many randomizations?" vignette (<https://docs.ropensci.org/canaper/articles/how-many-rand.html>).

The output is a data frame with communities as rows and summary statistics in columns.
A large number of summary statistics, including all of those needed to calculate CANAPE, are produced.
For a full explanation of all output columns, see Appendix S1 or run `?cpr_rand_test()`.

The following code demonstrates usage of `cpr_rand_test()`, using the same example dataset as above.

```{r}
#| label: cpr-rand-test-demo
set.seed(12345)

rand_test_results <- cpr_rand_test(
  phylocom$comm, phylocom$phy, null_model = "curveball")

# Print a subset of the output columns
rand_test_results[, 1:9]
```

## `cpr_classify_endem()`

The `cpr_classify_endem()` function classifies endemism types for the output of `cpr_rand_test()` as described above in "Analysis workflow".
The input is a data frame including the following columns calculated by `cpr_rand_test()`: `pe_obs_p_upper` (upper *p*-value comparing observed PE to random values), `pe_alt_obs_p_upper` (upper *p*-value comparing observed PE on alternate tree to random values), `rpe_obs_p_upper` (upper *p*-value for RPE), and `rpe_obs_p_lower` (lower *p*-value for RPE).
The output is the same data frame, with the column `endem_type` appended. Values of `endem_type` include `paleo` (paleoendemic), `neo` (neoendemic), `not significant`, `mixed` (mixed endemism), and `super` (super-endemic).

The following code demonstrates usage of `cpr_classify_endem()` with the output from `cpr_rand_test()` (note that for this small example, not all possible types of `endem_type` are produced).

```{r}
#| label: cpr-classify-endem-demo
canape_results <- cpr_classify_endem(rand_test_results)

# Look at the endem_type column
canape_results[, "endem_type", drop = FALSE]
```

In addition to `cpr_classify_endem()`, `canaper` includes the `cpr_classify_signif()` function for assessing significance level of PD, RPD, PE, and RPE.
Both `cpr_classify_endem()` and `cpr_classify_signif()` take a data frame as their first argument and return a data frame as output, so they are "pipe friendly", i.e., can be chained together using pipe operators (`%>%` or `|>`).

# Parallel computing

Parallel computing is enabled with the `future` package, which has been designed to allow maximum flexibility in the parallel backend selected by the user (e.g., multiple cores on one machine, multiple remote machines, etc.).
Parallelization is applied to the calculation of summary statistics for each random community, as there are potentially many random communities (typically \> 100 for a robust analysis, though this depends on the dataset).
To use parallel computing, no changes are needed for `cpr_rand_test()` etc.
Rather, `future` is loaded with `library()`, then a parallel back-end is specified with `plan()`.
The user is advised to consult the `future` website (<https://future.futureverse.org/>) for more information on specifying a parallel backend.

The following code demonstrates parallel computing.

```{r}
#| label: cpr-rand-comm-parallel-demo
#| eval: false
library(future)
set.seed(12345)

# Specify two cores running in parallel
plan(multisession, workers = 2)

# Usage of cpr_rand_test exactly the same as before
rand_test_results <- cpr_rand_test(
  phylocom$comm, phylocom$phy, null_model = "curveball")
```

There will not be a noticeable decrease in computing time since this dataset is so small.
However, parallelization can greatly decrease computing time for large datasets; more details are available in the "Parallel computing" vignette (<https://docs.ropensci.org/canaper/articles/parallel.html>).

# Datasets

`canaper` comes with three datasets for testing and demonstration (@tbl-datasets).
Each is a list with two named elements, `comm` (community matrix, data frame) and `phy` (phylogenetic tree, list of class `"phylo"`).
`acacia` includes data of Australian *Acacia* analyzed by @Mishler2014.
`phylocom` and `biod_example` are fictitious datasets compiled for testing software, and were originally published in Phylocom [@Webb2008] and Biodiverse [@Laffan2010], respectively.

# Example: Australian *Acacia*

## Analysis with `canaper`

To demonstrate usage with a real dataset, we reproduced the analysis of @Mishler2014, who conducted CANAPE on Australian *Acacia* using Biodiverse.
All `canaper` analyses were run with `canaper` v`r packageVersion("canaper")` in R v`r R.Version()$major`.`r R.Version()$minor`.
We used the `curveball` randomization algorithm with 50,000 iterations, since `cpr_iter_sim()` indicated this was sufficient to randomize the matrix (see "Major Functions").
Once the randomization algorithm and its settings have been selected, CANAPE can be conducted with just two commands.

```{r}
#| label: acacia-load
#| include: false
# Load pre-calculated results from targets pipeline
# - acacia_canape_cpr_1 is Acacia CANAPE results calculated with canaper
# - rename it so we can use it in demo code below
acacia_canape <- tar_read(acacia_canape_cpr_1,
  store = here::here("_targets"))
```

```{r}
#| label: acacia-demo
#| eval: false

# Set a seed for reproducibility
set.seed(12345)

# 1. Run randomization test
acacia_rand_res <- cpr_rand_test(
  acacia$comm, acacia$phy,
  null_model = "curveball",
  n_reps = 999, n_iterations = 50000,
  tbl_out = TRUE
)

# 2. Classify endemism
acacia_canape <- cpr_classify_endem(acacia_rand_res)
```

`canaper` does not include any plotting functions to visualize the results.
Rather, we recommend the `ggplot2` package or base R graphics to visualize results.
Here, we demonstrate use of the `ggplot2` and `patchwork` packages to visualize the output of `canaper` (@fig-acacia-cpr).

```{r}
#| label: acacia-plot-demo
#| fig.height: 8
#| eval: false
library(patchwork) # for multipart-panels
library(tidyverse) # includes ggplot2, other packages for data tidying

# Fist do some data wrangling to make the results easier to plot
# (add lat/long columns)
acacia_canape <- acacia_canape |>
  separate(site, c("long", "lat"), sep = ":") |>
  mutate(across(c(long, lat), parse_number))

a <- ggplot(acacia_canape, aes(x = long, y = lat, fill = endem_type)) +
  geom_tile() +
  # Use same colors as Misher et al. 2014
  # (for CVD-safe colors see cpr_endem_cols)
  scale_fill_manual(values = mishler_endem_cols) +
  guides(
    fill = guide_legend(title.position = "top", label.position = "bottom")
  ) +
  coord_fixed() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid.minor = element_blank()
  )

b <- ggplot(
  acacia_canape, aes(x = pe_alt_obs, y = pe_obs, color = endem_type)) +
  geom_abline(slope = 1, color = "darkgrey") +
  geom_point() +
  scale_color_manual(values = mishler_endem_cols) +
  labs(
    x = "Phylogenetic endemism on comparison tree",
    y = "Phylogenetic endemism on actual tree"
  ) +
  theme_bw() +
  theme(legend.position = "none")

a + b + plot_layout(ncol = 1) + 
  plot_annotation(
    tag_levels = "a",
    tag_prefix = "(",
    tag_suffix = ")")
```

As in Figure 3 of @Mishler2014, grid-cells with significant endemism are primarily located on the coasts, with mostly non-significant grid-cells in the interior (@fig-acacia-cpr).
Furthermore, the endemism types largely correspond between the two figures.

```{r}
#| label: compare-cpr-biod
#| include: false

# Load CANAPE results from canaper and biodiverse
tar_load(c(
  acacia_canape_biod,
  acacia_canape_comp,
  acacia_biod_elapsed_min,
  acacia_canape_cpr_1,
  acacia_canape_cpr_2),
  store = here::here("_targets")
)

# Extract percent agreement
p_agree <- scales::percent(acacia_canape_comp$p_agree, accuracy = 0.1)

# Make table comparing the two
comp_table <- left_join(
  count(acacia_canape_cpr_1, endem_type, name = "n_canaper"),
  count(acacia_canape_biod, endem_type, name = "n_biodiverse"),
  by = "endem_type")
```

The color palette used in @fig-acacia-cpr, `mishler_endem_cols`, is the same as that used in @Mishler2014.
However, this palette may not be distinguishable to people with color-vision deficiency (CVD).
Alternate color palettes (e.g., `cpr_endem_cols`) are also available in `canaper` that include CVD-safe colors [@Okabe2002].
Palettes for plotting CANAPE and *p*-rank results can be selected with the `cpr_make_pal()` function.
The same plot visualized with CVD-safe colors is available in Fig. S2.

## Comparison with Biodiverse

```{r}
#| label: tally-cells
#| include: false

# Tally number of significant cells in canaper vs. Biodiverse
sig_tally <-
  comp_table %>%
  mutate(
    endem_type = str_replace_all(
      endem_type, "not significant", "not_significant") %>%
      as.factor() %>%
      fct_collapse(significant = c("neo", "paleo", "mixed", "super"))
      ) %>%
  rename(canaper = n_canaper, biodiverse = n_biodiverse) %>%
  pivot_longer(names_to = "analysis", values_to = "n_sites", -endem_type) %>%
  group_by(endem_type, analysis) %>%
  summarize(n_sites = sum(n_sites), .groups = "drop") %>%
  split(.$analysis) %>%
  purrr::map(., ~split(., .$endem_type))
```

We also re-ran the *Acacia* analysis using Biodiverse v3.1 with the same settings as @Mishler2014 (999 replicates of the `rand_structured` null model) and compared the results with those from `canaper`.
Importantly, there is no expectation that results between the two should match exactly, for two reasons.
First, the null model used between the Biodiverse and `canaper` analyses differ (`rand_structured` and `curveball`, respectively).
`rand_structured` is not currently available in R, but we hope to add this to a future version of `canaper`.
Second, the random communities generated in each run will be different, so the exact *p*-values will also be different.
With a sufficiently high number of random communities, significance (e.g., at the $\alpha = 0.5$ level) is expected to converge, but there may be borderline cases that appear significant in some analyses and non-significant in others.
(We have verified that calculation of deterministic metrics that do not rely on random values, e.g., raw PD, are identical between Biodiverse and `canaper`, and include a test for this in `canaper`).

When we compared endemism type between the `canaper` and Biodiverse CANAPE results for Australian *Acacia*, they agreed in `r p_agree` of grid-cells (@tbl-cpr-biod).
The total number of significant cells was very similar (*n* = `r sig_tally$canaper$significant$n_sites` and `r sig_tally$biodiverse$significant$n_sites` sites, `canaper` and Biodiverse, respectively).
The `rand_structured` and `curveball` null models both preserve total abundance per species and richness of each site (community matrix marginal sums); in that sense, they are relatively conservative null models [@Strona2018], which may explain the relative high agreement between results.
Selection of an appropriate null model is beyond the scope of this paper, but must be considered carefully in any community ecological analysis.

```{r}
#| label: build-times
#| include: false

# Load build times as a list
times <- targets::tar_meta(
  fields = seconds,
  store = here::here("_targets")
  ) %>%
  mutate(minutes = number(seconds / 60, accuracy = 0.1)) %>%
  split(.$name)
```

Computations were carried out on an MacBook Pro (2019) with 16 GB RAM and a 1.7 GHz, four core processor.
Approximate compute times were `r acacia_biod_elapsed_min` min for Biodiverse and `r times$acacia_canape_cpr_1$minutes` min for `canaper` (sequential, i.e., non-parallel mode, for both).
However, when parallel computing was enabled for `canaper` with two cores, compute time dropped to `r times$acacia_canape_cpr_2$minutes` min.
This demonstrates that `canaper` can efficiently compute moderately sized datasets with a personal laptop computer.

# Comparison with other R packages

We are not aware of any other R packages that conduct the entire CANAPE pipeline automatically.
However, there is a large number of packages for analyzing species diversity [approximately 40 packages out of 15,300 as of 2019\; @Pavoine2020].
Some of those that are more closely related to `canaper` include the following.
`picante` [@Kembel2010] was one of the first packages to offer calculation of phylogenetic alpha diversity such as MPD, MNTD, and PD [@Webb2000] and supports seven randomization algorithms, including two variations of the `swap` algorithm [@Gotelli2003; @Miklos2004].
`phyloregion` [@Daru2020a] implements sparse matrix encoding to increase computing efficiency of PD, and is used by `canaper`.
`vegan` [@Oksanen2017] performs a wide range of non-phylogenetic community ecology analyses.
`vegan` includes by far the greatest number of algorithms for generating random communities, including `curveball` [@Strona2014] and both variations of `swap`, and is used by `canaper`.
`adiv` [@Pavoine2020] provides a flexible framework for analyzing alpha and beta diversity of biological communities based on either phylogenetic or trait distances.
`PhyloMeasures` [@Tsirogiannis2016] implements efficient routines for calculating phylogenetic diversity metrics.
`EcoSimR` [@Gotelli2013a] provides randomization algorithms as well as functions for characterizing community matrices and null distributions.
As of writing, `PhyloMeasures` and `EcoSimR` had been removed from CRAN and may not be under active development.

# Conclusions

The `canaper` package enables CANAPE completely within R for the first time.
This will simplify workflows and facilitate reproducibility for researchers studying spatial biodiversity with R.
Furthermore, `canaper` features efficient computing routines and simple yet flexible implementation of parallel computing, thereby decreasing computation time.
`canaper` has already been used at least three studies while in development [@Ellepola2022; @Lu2022; @Nitta2022a].
We expect `canaper` will become a major tool in the toolkit of the emerging field of spatial phylogenetics alongside Biodiverse.

<!-- FIXME: for double-blind review leave out of submission text, but add after accepted 

To cite canaper or acknowledge its use, cite this Software note as follows, substituting the version of the application that you used for 'version 1.0.0':

Nitta, J. H. et al. 2022. canaper: Categorical analysis of neo- and paleo-endemism in R. FIXME: ADD DETAILS HERE (ver 1.0.0)

# Acknowledgements

Members of the Iwasaki Lab (The University of Tokyo) provided helpful comments while the package was in development.
Luis Osorio and Klaus Schliep reviewed the code as part of submission to rOpenSci.

# Funding

This research supported in part by Japan Society for the Promotion of Science (Kakenhi) Grant numbers 16H06279, 22H04925, and 22K15171.

# Author contributions

**Joel H. Nitta**: Conceptualization (Lead); Formal analysis (Lead); Funding acquisition (Supporting); Methodology (Lead); Software (Lead); Visualization (Lead); Writing – original draft (Lead); Writing – review & editing (Equal).
**Shawn W. Laffan**: Data curation (Lead); Methodology (Supporting); Software (Supporting); Writing – review & editing (Equal).
**Brent D. Mishler**: Writing – review & editing (Equal).
**Wataru Iwasaki**: Funding acquisition (Lead); Project administration (Lead); Supervision (Lead); Writing – review & editing (Equal).

-->

# Data availability statement

The `canaper` R package is distributed by the Comprehensive R Archive Network (CRAN), with source code available on GitHub (<https://github.com/ropensci/canaper>) and Zenodo (<https://doi.org/10.5281/zenodo.5094032>).
Usage of `canaper` is documented at <https://docs.ropensci.org/canaper/>.
<!-- FIXME: for double-blind review leave out of submission text, but add after accepted 
Code and data used to conduct analyses and generate this manuscript are available at <https://github.com/joelnitta/canaper_ms>, and can be run using the Docker image `joelnitta/canaper_ms` available at <https://hub.docker.com/r/joelnitta/canaper_ms>.
-->
The `acacia` dataset was originally published by @Mishler2014.

# References

<!-- FIXME: for some reason Lai2019 shows up as "in press" -->
<div id="refs"></div>

{{< pagebreak >}}

# Figure captions

**@fig-workflow.** `canaper` workflow and functions to conduct categorical analysis of neo- and paleo-endemism (CANAPE).
Input data are a community matrix and phylogeny.
First, the user selects a randomization algorithm and its settings, with optional assistance from the `cpr_iter_sim()` function.
Next, a set of random communities are generated, various metrics (e.g., phylogenetic endemism, relative phylogenetic endemism) are calculated for the input community and each random community, and the rank (*p*-value) of each observed metric is compared to those of the random communities by the `cpr_rand_test()` function.
Finally, endemism types are categorized on the basis of the ranked metrics with the `cpr_classify_endem()` function.
For details on metrics and classification, see "Analysis Workflow".
For details on functions, see "Major Functions".

**@fig-acacia-cpr.** Categorical analysis of neo- and paleo-endemism (CANAPE) of Australian *Acacia*.
(a) Map of Australia showing grid-cells (communities) colored by endemism type.
Latitude and longitude projected into equal area Australian Albers (EPSG:3577) coordinate system [@Butler2007]; units in m.
(b) Scatterplot of comparing phylogenetic endemism (PE) of each community as measured on the original tree vs. a comparison tree with all non-zero branch lengths set to equal length, colored according to endemism type. This figure reproduces Figure 3 of @Mishler2014.

{{< pagebreak >}}

# Tables

```{r}
#| label: tbl-datasets
#| tbl-cap: "Datasets in `canaper`"
#| echo: false

comms <- list(
  acacia = acacia$comm,
  biod_example = biod_example$comm,
  phylocom = phylocom$comm
)

phylos <- list(
  acacia = acacia$phy,
  biod_example = biod_example$phy,
  phylocom = phylocom$phy
)

tibble(
  Dataset = names(comms) %>% paste0("`", ., "`"),
  `*n* sites` = map_dbl(comms, nrow),
  `*n* species (community matrix)` = map_dbl(comms, ncol),
  `*n* species (phylogeny)` = map_dbl(phylos, ape::Ntip)
) %>%
  knitr::kable()
```

The `acacia` dataset [@Mishler2014] includes two outgroup taxa in the phylogeny that are not in the community matrix.
The `phylocom` dataset [@Webb2008] also includes more taxa in the phylogeny than the community matrix.

```{r}
#| label: tbl-cpr-biod
#| tbl-cap: "Comparison of CANAPE results for Australian *Acacia* between `canaper` and Biodiverse"
#| echo: false

comp_table %>%
  select(
    `Endemism type` = endem_type,
    `*n* sites (canaper)` = n_canaper,
    `*n* sites (Biodiverse)` = n_biodiverse
  ) %>%
knitr::kable()
```

{{< pagebreak >}}

# Boxes

**Box 1**: Glossary of terms.

- Community: A co-occurring set of species.
- Grid-cell: One of a set of spatial units each with equal area that together cover a region of interest; each grid-cell comprises a community. Often used synonymously with "site".
- Community matrix: A 2-dimensional dataset with communties (grid-cells) on one axis and species on the other. `canaper` expects communities as rows and species as columns.
- Phylogenetic diversity (PD): The total branch length (including the root) connecting the species occurring in a given area (community or grid-cell), measured on an overall tree that includes all the species in the study [@Faith1992].
- Phylogenetic endemism (PE): Range weighted PD where the weight for each branch is the fraction of its overall range represented in the sample area (typically a grid-cell) [@Rosauer2009].
- Relative phylogenetic diversity (RPD): The ratio of PD measured on the original tree vs. PD measured on a comparison tree with all branch lengths transformed to equal length [@Mishler2014].
- Relative phylogenetic endemism (RPE): The ratio of PE measured on the original tree vs. PE measured on a comparison tree with all branch lengths transformed to equal length [@Mishler2014].
- Neoendemic: An area with a high concentration of short, range-restricted branches; may be due to processes such as recent speciation (radiation).
- Paleoendemic: An area with a high concentration of long, range-restricted branches; may be due to processes such as extinction or colonization by distantly relatives from outside the study area.
- Mixed endemic: An area with a mixture of short and long, range-restricted branches; may be due to multiple processes.
- Super endemic: An area with mixed endemism that is statistically highly significant.

{{< pagebreak >}}

![`canaper` workflow and functions to conduct categorical analysis of neo- and paleo-endemism (CANAPE)](workflow.png){#fig-workflow}

```{r}
#| label: fig-acacia-cpr
#| fig.height: 8
#| fig-cap: "Categorical analysis of neo- and paleo-endemism (CANAPE) of Australian *Acacia*."
#| echo: false

# Fist do some data wrangling to make the results easier to plot
# (add lat/long columns)
acacia_canape <- acacia_canape |>
  separate(site, c("long", "lat"), sep = ":") |>
  mutate(across(c(long, lat), parse_number))

a <- ggplot(acacia_canape, aes(x = long, y = lat, fill = endem_type)) +
  geom_tile() +
  # use same colors as Misher et al. 2014
  # (for CVD-safe colors could use cpr_endem_cols or cpr_endem_cols_2)
  scale_fill_manual(values = mishler_endem_cols) +
  guides(
    fill = guide_legend(title.position = "top", label.position = "bottom")
  ) +
  coord_fixed() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid.minor = element_blank()
  )

b <- ggplot(
  acacia_canape,
  aes(x = pe_alt_obs, y = pe_obs, color = endem_type)
) +
  geom_abline(slope = 1, color = "darkgrey") +
  geom_point() +
  scale_color_manual(values = mishler_endem_cols) +
  labs(
    x = "Phylogenetic endemism on comparison tree",
    y = "Phylogenetic endemism on actual tree"
  ) +
  theme_bw() +
  theme(legend.position = "none")

fig <- a + b + plot_layout(ncol = 1) + plot_annotation(
  tag_levels = "a",
  tag_prefix = "(",
  tag_suffix = ")")

ggsave(plot = fig, file = here::here("ms/figure_2.pdf"),
  width = 100, height = 200, units = "mm")

fig
```
